# Control the PWM signal of the output fan

output:
  - platform: ledc
    pin: 39
    frequency: 20kHz
    id: hotend_fan_output

switch:
  - platform: gpio
    pin: 
      number: 6
      inverted: false
      # mode: INPUT_PULLUP #TODO: verify pullup and not pulldown
    id: hotend_fan_switch
    on_turn_on:
      - text_sensor.template.publish:
          id: hotend_fan_mosfet_state
          state: "ON"
    on_turn_off:
      - text_sensor.template.publish:
          id: hotend_fan_mosfet_state
          state: "OFF"

# hotend_fan_switch is intentionally made internal, so users cant accidentially turn it off
# hotend_fan_mosfet_state shows if the mosfet is on or off
text_sensor:
  - platform: template
    name: "Hotend Fan Mosfet"
    id: hotend_fan_mosfet_state
    icon: mdi:fan
  - platform: template
    name: "Hotend Fan Speed"
    id: hotend_fan_speed
    icon: mdi:speedometer
    lambda: |-
      auto speed = id(hotend_fan).speed;
      return speed ? std::to_string(speed) + "%" : "0%";

fan:
  - platform: speed
    output: hotend_fan_output
    name: "Hotend Fan"
    id: hotend_fan
    disabled_by_default: false
    restore_mode: NO_RESTORE #TODO: ALWAYS_ON
    internal: true #TODO: set to true before shipping, or make dynamic
    speed_count: 100
    on_speed_set:
      then:
        - text_sensor.template.publish:
            id: hotend_fan_speed
            state: !lambda |-
              return std::to_string(id(hotend_fan).speed) + "%";
        - lambda: |-
            if (id(hotend_fan).speed < 30.0) {
              id(hotend_fan_switch).turn_off();
            } else {
              id(hotend_fan_switch).turn_on();
            }
