binary_sensor:
  - platform: template
    device_class: safety #or problem
    id: error_handler
    name: "Error Handler"
    lambda: |-
      float ntc_temp = id(ntc_sensor).state;
      bool is_error = false;
      if ( ntc_temp < 10 ) {
        is_error = true;
      }
      if ( ntc_temp > 20 ) {
        is_error = true;
      }
      if (is_error) {
        if (id(state_machine_mode).current_state() != "ERROR") {
          //if (previous_state->value() != "NORMAL" || previous_state->value() != "SILENCED") {
          //  id(previous_state) = id(state_machine_mode).current_state();
          //}
          //if (id(previous_state) != "NORMAL" ) {
          //}
          id(state_machine_mode).transition("ERROR_ENTER");
        }
      } else {
        if (id(state_machine_mode).current_state() == "ERROR") {
          //TODO testing comments
          id(state_machine_mode).transition("ERROR2NORMAL");
        }
      }
      return is_error;
